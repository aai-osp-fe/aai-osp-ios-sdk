// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name OneStop
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import CommonCrypto
import FaceTecSDK
import Foundation
import Moya
@_exported import OneStop
import PromiseKit
import Swift
import SwiftMessages
import UIKit.UIColor
import UIKit.UIFont
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct AAIError : Swift.Error {
}
extension OneStop.AAIError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct AAILoadingInfo {
}
@_hasMissingDesignatedInitializers public class AAILoading {
  public static let ld: OneStop.AAILoading
  public func show(info: OneStop.AAILoadingInfo? = nil)
  public func dismiss()
  @objc deinit
}
public struct AAIServiceConfig {
  public static var baseUrl: Foundation.URL {
    get
  }
}
extension Swift.String {
  public var lux: OneStop.AttributesDSL {
    get
  }
}
@_hasMissingDesignatedInitializers public class AttributeMaker {
  public func foregroundColor(color: UIKit.UIColor) -> Self
  public func font(f: UIKit.UIFont) -> Self
  public func backgroundColor(color: UIKit.UIColor) -> Self
  public func strikethroughStyle(style: Swift.Int) -> Self
  public func ligature(n: Swift.Int) -> Self
  public func kern(f: Swift.Float) -> Self
  public func obliqueness(f: Swift.Float) -> Self
  public func link(url: Foundation.URL) -> Self
  public func underline(style: UIKit.NSUnderlineStyle) -> Self
  public var ph: OneStop.LuxParagraph {
    get
  }
  public func range(r: Swift.Range<Swift.String.Index>)
  public func full()
  public func at(first string: Swift.String)
  public func at(all string: Swift.String)
  @objc deinit
}
public struct AttributesDSL {
  public func makeAttributes(maker: (OneStop.AttributeMaker) -> Swift.Void) -> Foundation.NSAttributedString
}
extension Foundation.NSAttributedString {
  public func insertAttachmentAtHead(img: UIKit.UIImage) -> Foundation.NSAttributedString
  public func insertAttachmentAtTail(img: UIKit.UIImage) -> Foundation.NSAttributedString
  public func insertAttachment(img: UIKit.UIImage, index: Swift.Int) -> Foundation.NSAttributedString
}
extension UIKit.UIColor {
  public static let grey1: UIKit.UIColor
  public static let textColor1: UIKit.UIColor
  public static let textColor2: UIKit.UIColor
  public static let brandGreen: UIKit.UIColor
  public static let blackText: UIKit.UIColor
  public static let pageBgColor: UIKit.UIColor
  public static let borderColor: UIKit.UIColor
  public static let grey2: UIKit.UIColor
  public func toImage(size: CoreFoundation.CGSize = CGSize.init(width: 5, height: 5)) -> UIKit.UIImage?
}
public class DocumentNode : OneStop.Nodable {
  weak public var startController: UIKit.UIViewController?
  public init()
  public func start(_ data: OneStop.NodeModel, completion: (() -> Swift.Void)?) -> (any OneStop.WorkflowCapable)?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DocVerfiCommitData {
  @objc deinit
}
public enum ServiceCode : Swift.String, Swift.Codable {
  case SUCCESS
  case INTERNAL_ERROR
  case INPUT_ERROR
  case MSG_IMAGE_INVALID
  case unknown
  public typealias AllCases = [OneStop.ServiceCode]
  public typealias RawValue = Swift.String
  public static var allCases: [OneStop.ServiceCode] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class LogoView : UIKit.UIView {
  @objc deinit
}
public enum CallBackType : Swift.String {
  case onReady
  case onFinish
  case onExit
  case onError
  case onEvent
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol CallBackable {
  func onReady()
  func onFinish(status: Swift.Bool, params: [Swift.String : Swift.String])
  func onExit(nodeCode: Swift.String, params: [Swift.String : Swift.String])
  func onError(errorCode: OneStop.CallBackErrorCode, params: [Swift.String : Swift.String])
  func onEvent(eventName: OneStop.CallBackEventName, params: [Swift.String : Swift.String])
}
public class CallBacker : OneStop.CallBackable {
  public init(onReady: (() -> Swift.Void)? = nil, onFinish: ((Swift.Bool, [Swift.String : Swift.String]) -> Swift.Void)? = nil, onExit: ((Swift.String, [Swift.String : Swift.String]) -> Swift.Void)? = nil, onError: ((OneStop.CallBackErrorCode, [Swift.String : Swift.String]) -> Swift.Void)? = nil, onEvent: ((OneStop.CallBackEventName, [Swift.String : Swift.String]) -> Swift.Void)? = nil)
  public func onReady()
  public func onFinish(status: Swift.Bool, params: [Swift.String : Swift.String] = [:])
  public func onExit(nodeCode: Swift.String, params: [Swift.String : Swift.String] = [:])
  public func onError(errorCode: OneStop.CallBackErrorCode, params: [Swift.String : Swift.String] = [:])
  public func onEvent(eventName: OneStop.CallBackEventName, params: [Swift.String : Swift.String] = [:])
  @objc deinit
}
public enum CallBackErrorCode {
  case liveness_sdk_init_fail
  case node_is_not_supported
  case work_flow_error
  public static func == (a: OneStop.CallBackErrorCode, b: OneStop.CallBackErrorCode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum CallBackEventName {
  case start
  case document_country_select
  case document_type_select
  case document_camera_capture
  case document_upload
  case selfie_camera_capture
  case selfie_photo_upload
  case enable_camera
  case retry
  case failure
  case decline
  case success
  case pending
  public static func == (a: OneStop.CallBackEventName, b: OneStop.CallBackEventName) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum NodeType : Swift.String {
  case start
  case selfie
  case document
  case end
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum NodeCode : Swift.String, Swift.Codable {
  case FACE_PHOTO
  case SELFIE_VERIFICATION
  case START_ONBOARDING
  case FINISH_ONBOARDING_SUCCESS
  case FINISH_ONBOARDING_DECLINE
  case FINISH_ONBOARDING_PENDING
  case DOCUMENT_VERIFICATION
  case unknown
  public typealias AllCases = [OneStop.NodeCode]
  public typealias RawValue = Swift.String
  public static var allCases: [OneStop.NodeCode] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public protocol Nodable : AnyObject {
  var startController: UIKit.UIViewController? { get }
  func start(_ data: OneStop.NodeModel, completion: (() -> Swift.Void)?) -> (any OneStop.WorkflowCapable)?
}
public struct NodeModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class OneStopManager {
  public static let `default`: OneStop.OneStopManager
  public func ready()
  public func start(launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?)
  public func registerNode(name: OneStop.NodeType, node: any OneStop.Nodable)
  public func start(context: UIKit.UIViewController)
  public func register(callbacker: any OneStop.CallBackable)
  public func ex_start(token: Swift.String, context: UIKit.UIViewController)
  @objc deinit
}
extension OneStop.OneStopManager {
  public func toReloadViewController(context: UIKit.UIViewController)
}
@_hasMissingDesignatedInitializers public class OSPConfig {
  public enum Env : Swift.String, Swift.CaseIterable {
    case pre
    case stg
    case sandbox
    case dev
    case id
    case sg
    public var baseUrl: Foundation.URL {
      get
    }
    public init?(url: Swift.String)
    public init?(rawValue: Swift.String)
    public typealias AllCases = [OneStop.OSPConfig.Env]
    public typealias RawValue = Swift.String
    public static var allCases: [OneStop.OSPConfig.Env] {
      get
    }
    public var rawValue: Swift.String {
      get
    }
  }
  public static let `default`: OneStop.OSPConfig
  public var env: OneStop.OSPConfig.Env
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LuxParagraph {
  public func line(space: CoreFoundation.CGFloat) -> Self
  public func paragraph(space: CoreFoundation.CGFloat) -> Self
  public func alignment(a: UIKit.NSTextAlignment) -> Self
  public func firstLineHead(indent: CoreFoundation.CGFloat) -> Self
  public func head(indent: CoreFoundation.CGFloat) -> Self
  public func tail(indent: CoreFoundation.CGFloat) -> Self
  public func lineBreak(mode: UIKit.NSLineBreakMode) -> Self
  public func minimumLine(height: CoreFoundation.CGFloat) -> Self
  public func maximumLine(height: CoreFoundation.CGFloat) -> Self
  public func baseWriting(direction: UIKit.NSWritingDirection) -> Self
  public func lineHeight(multiple: CoreFoundation.CGFloat) -> Self
  public func paragraph(spacingBefore: CoreFoundation.CGFloat) -> Self
  public func hyphenation(factor: Swift.Float) -> Self
  public func full()
  @objc deinit
}
extension Swift.RangeExpression where Self.Bound == Swift.String.Index {
  public func luxRange<S>(in string: S) -> Foundation.NSRange where S : Swift.StringProtocol
}
@_hasMissingDesignatedInitializers public class HtmlElement {
  @objc deinit
}
public class ParseHtml {
  public init(htmlText: Swift.String, mediumFont: UIKit.UIFont, boldFont: UIKit.UIFont, color: UIKit.UIColor)
  public func to_richText() -> Foundation.NSAttributedString?
  @objc deinit
}
public class SelfieNode : OneStop.Nodable {
  weak public var startController: UIKit.UIViewController?
  public init()
  public func start(_ data: OneStop.NodeModel, completion: (() -> Swift.Void)? = nil) -> (any OneStop.WorkflowCapable)?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Theme {
  public static let center: OneStop.Theme
  public func fetchLogo(done: @escaping (UIKit.UIImage?) -> Swift.Void)
  @objc deinit
}
public enum ThemeType : Swift.String {
  case basicSetting
  case color
  case font
  case buttons
  case advanced
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Theme_font : Swift.String {
  case headingFont
  case headingFontSize
  case headingFontWeight
  case subTitleFont
  case bodyFontSize
  case smallTextFont
  case buttonFontWeight
  case textAlign
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CommitType {
  case body([Swift.String : Swift.String])
  case uploadImage(OneStop.TwoDCommitData)
  case selfie3d(OneStop.ThreeDCommitData)
  case documentVerfication(OneStop.DocVerfiCommitData)
  case noData
  case error(OneStop.AAIError)
}
public protocol WorkflowCapable {
  var workflow: (() -> OneStop.Workflow)? { get set }
  func interception_curNode_after_commit(model: OneStop.NodeModel) -> PromiseKit.Promise<OneStop.NodeModel>
  func quit()
}
public protocol ViewModelable : OneStop.WorkflowCapable {
  var data: OneStop.NodeModel { get }
}
extension UIKit.UIStackView {
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func at_addArrangedSubView(view: UIKit.UIView, condition: (() -> Swift.Bool)? = nil, customSpacing: CoreFoundation.CGFloat? = nil) -> UIKit.UIStackView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func at_addArrangedSubView<T>(seq: T, customSpacing: CoreFoundation.CGFloat? = nil, viewxspacing: (T.Element) -> (UIKit.UIView, CoreFoundation.CGFloat?)) -> UIKit.UIStackView where T : Swift.Sequence
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func at_addArrangedSubView(view: () -> UIKit.UIView, condition: (() -> Swift.Bool)? = nil, customSpacing: CoreFoundation.CGFloat? = nil) -> UIKit.UIStackView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func at_addArrangedSubView<T>(condition: () -> T?, view: (T) -> UIKit.UIView, customSpacing: CoreFoundation.CGFloat? = nil) -> UIKit.UIStackView
}
public class Workflow {
  public init(sdkToken: Swift.String)
  public func start()
  @objc deinit
}
public struct TwoDCommitData {
  public init(image: UIKit.UIImage, body: [Swift.String : Swift.String])
}
public struct ThreeDCommitData {
  public init(userAgent: Swift.String? = nil, faceScan: Swift.String? = nil, facePhotoUri: Swift.String? = nil, lowQualityAuditTrailImage: Swift.String? = nil, transactionStatus: Swift.String? = nil)
}
extension OneStop.ServiceCode : Swift.RawRepresentable {}
extension OneStop.ServiceCode : Swift.CaseIterable {}
extension OneStop.ServiceCode : Swift.Equatable {}
extension OneStop.ServiceCode : Swift.Hashable {}
extension OneStop.CallBackType : Swift.Equatable {}
extension OneStop.CallBackType : Swift.Hashable {}
extension OneStop.CallBackType : Swift.RawRepresentable {}
extension OneStop.CallBackErrorCode : Swift.Equatable {}
extension OneStop.CallBackErrorCode : Swift.Hashable {}
extension OneStop.CallBackEventName : Swift.Equatable {}
extension OneStop.CallBackEventName : Swift.Hashable {}
extension OneStop.NodeType : Swift.Equatable {}
extension OneStop.NodeType : Swift.Hashable {}
extension OneStop.NodeType : Swift.RawRepresentable {}
extension OneStop.NodeCode : Swift.RawRepresentable {}
extension OneStop.NodeCode : Swift.CaseIterable {}
extension OneStop.NodeCode : Swift.Equatable {}
extension OneStop.NodeCode : Swift.Hashable {}
extension OneStop.OSPConfig.Env : Swift.Equatable {}
extension OneStop.OSPConfig.Env : Swift.Hashable {}
extension OneStop.OSPConfig.Env : Swift.RawRepresentable {}
extension OneStop.ThemeType : Swift.Equatable {}
extension OneStop.ThemeType : Swift.Hashable {}
extension OneStop.ThemeType : Swift.RawRepresentable {}
extension OneStop.Theme_font : Swift.Equatable {}
extension OneStop.Theme_font : Swift.Hashable {}
extension OneStop.Theme_font : Swift.RawRepresentable {}
